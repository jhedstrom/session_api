<?php

// $Id: session_api.module,v 1.1.2.5 2009/02/25 00:54:48 jhedstrom Exp $

/**
 * @file
 * The Session API module provides a quick interface for storing
 * information in the session.
 */

/**
 * Determine if cookies are enabled.
 */
function session_api_available() {
  return !empty($_COOKIE);
}

/**
 * Return a Session API ID corresponding to the current session. The Session
 * API ID is the mapping of the private php session_id [1] to the ID used by
 * modules leveraging the Session API.
 *
 * 1. http://php.net/manual/en/function.session-id.php
 */
function session_api_get_sid() {
  if (!session_api_available()) {
    return FALSE;
  }

  if (!is_numeric($_SESSION['session_api_id'])) {
    // First, check if id exists in db.
    $sid = db_result(db_query("SELECT sid FROM {session_api} WHERE session_id = '%s'", session_id()));
    
    if (!$sid) {
      // No sid exists, create new one.
      $rec = new stdClass();
      $rec->session_id = session_id();
      drupal_write_record('session_api', $rec);
      $sid = $rec->sid;
    }
      
    $_SESSION['session_api_id'] = $sid;
  }
  return $_SESSION['session_api_id'];
}

/**
 * Implementation of hook_menu().
 */
function session_api_menu() {
  $items['admin/settings/session-api'] = array(
    'title' => t('Session API Configuration'),
    'description' => t('Configure Session API behavior'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('session_api_settings_form'),
    'file' => 'session_api.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function session_api_cron() {
  // Fetch list of outdated sids.
  $result = db_query("SELECT sap.sid FROM {session_api} sap LEFT JOIN {sessions} s ON (sap.session_id = s.sid) WHERE s.sid IS NULL");
  $outdated_sids = array();
  while ($session = db_fetch_object($result)) {
    $outdated_sids[] = $session->sid;
  }
  if (!empty($outdated_sids)) {
    module_invoke_all('session_api_cleanup', $outdated_sids);
    db_query('DELETE FROM {session_api} WHERE sid IN (' . implode(',', $outdated_sids) . ')');
  }
}

/**
 * Implementation of hook_session_api_cleanup().
 *
 * A self implementation of the Session API cleanup hook. Generally called
 * from session_api_cron().
 *
 * @param string $op
 *   The operation the function perform.
 *    * run  - perform the cleanup
 *    * info - provide information(in the form of a keyed array) of the title
 *             and description of the cleanup.
 * @return
 *   Varies with $op.
 *   * run - NULL
 *   * info - a keyed array containing title and description
 */
function session_api_session_api_cleanup($op = 'run') {
  switch ($op) {
    case 'info':
      return array(
        'title' => t('Clear expired <strong>Session API</strong> sessions'),
        'description' => t('Clear out old <strong>Session API</strong> IDs for which the corresponding <a href="!php">PHP session</a> no longer exists. <br /><strong>Important</strong>: This option must be checked for any of the subsequent cleanup processes to work. Unchecking this will disable any removal of expired session data.', array('!php' => url('http://php.net/manual/en/book.session.php'))),
      );

    case 'run':
    default:
      // Fetch list of outdated sids.
      $result = db_query("SELECT sap.sid FROM {session_api} sap LEFT JOIN {sessions} s ON (sap.session_id = s.sid) WHERE s.sid IS NULL");
      while ($session = db_fetch_object($result)) {
       // Remove the session api id.
        db_query("DELETE FROM {session_api} WHERE sid = %d", $session->sid);
      }
  }
}

/**
 * Implementation of hook_simpletest().
 */
function session_api_simpletest() {
  $module_name = 'session_api';
  $dir = drupal_get_path('module', $module_name) .'/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}
